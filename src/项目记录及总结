1. 使用 styled-components： 让每个组件引入自己的样式，提高性能。
2. iconfont  的使用
3. react-redux
4. combineReducers   整合 reducer
5. 把一个组件的数据放在一起， store 的 index.js 引入这个组建的所有文件并导出，这样外部需要引入时只要直接引入这个 store 就可以了。
6. immutable.js   帮助我们生成一个 immutable 对象，确保我们不会直接修改 state 的值
                  import { fromJS } from 'immutable';
                  const defaultState = fromJS({
                    focused: false
                  })
                  return state.set('focused', true)
                  immutable 对象的 set 方法，会结合之前 immutable 对象的值和设置的值，返回一个全新的对象
7. redux-immutable: 
          const mapStateToProps = (state) => {
            return {
              focused: state.header.get('focused')
            }
          }
          应用了 immutable 之后，这时我们的 state.header 是一个 immutable 对象，但是 state 却是一个 js 对象，这个时候我们就可以
          使用 redux-immutable 把我们的 state 也转换为 immutable 对象。
          focused: state.get('header').get('focused')  => focused: state.getIn(['header','focused'])
8. redux-thunk   axios
9. 在 public 文件夹里写的可以被启动的本地服务器访问到： 
        因为 create-react-app 底层也是一个 node 的服务器，当你去访问 “http://localhost:3000/api/headerList.json” 时，
        它会先去你的工程目录下去看有没有对应的路由，如果找不到，它会去 public 目录下找。
10. 直接改变数组时会把 immutable 类型的数组变成普通数组，所以要在 Creator 里传递 action 之前把这个数组变成 immutable 的数组。
11、immutable 类型的数组也有 map 方法，没有 arr[i] 这样的写法
12、 transition  transform  ref
13、<Route path='/' exact component={Home}></Route>
14、 immutable + pureComponent 管理数据，pureComponent 内部实现了 shouldComponentUpdate, 但是如果没有用 immutable 时最好自己手写 shouldComponentUpdate
15、动态路由获取参数 http://localhost:3000/detail/1
16、connect(mapStateToProps, mapDispatchToProps)(withRouter(Detail));  withRouter // 让 Detail 组件可以获取到 Router 里的所有参数和内容
17、import Loadable from 'react-loadable';   